// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// Using PostgreSQL for production deployment on Vercel
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  chats         Chat[]
  documents     Document[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Chat History Models
model Chat {
  id        String    @id @default(cuid())
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  title     String?
  messages  Message[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id        String   @id @default(cuid())
  chatId    String
  role      String // "user" or "assistant"
  content   String
  createdAt DateTime @default(now())
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

// Document Models
model Document {
  id          String        @id @default(cuid())
  userId      String
  filename    String
  blobUrl     String // URL to the file in Vercel Blob Storage
  contentType String // MIME type of the file
  uploadDate  DateTime      @default(now())
  status      String // "processing" | "indexed" | "failed"
  size        Int
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  vectors     VectorStore[]
}

// Vector Store Model
model VectorStore {
  id           String   @id @default(cuid())
  documentId   String
  documentName String
  text         String   @db.Text
  embedding    Float[] // Store the embedding as an array of floats
  document     Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
}
